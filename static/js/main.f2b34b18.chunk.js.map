{"version":3,"sources":["Login.js","WebPlayback.jsx","Bubble.js","ArrayOfBubbles.js","Bubbles.js","Player.js","App.js","index.js"],"names":["Login","className","href","track","name","album","images","url","artists","currentSong","WebPlayback","props","useState","is_paused_active_currentTrack","setAllThatStuff","undefined","player","setPlayer","useEffect","script","document","createElement","src","async","body","appendChild","window","onSpotifyWebPlaybackSDKReady","Spotify","Player","getOAuthToken","cb","token","volume","addListener","device_id","console","log","state","getCurrentState","then","paused","track_window","current_track","connect","songChange","alt","onClick","previousTrack","togglePlay","nextTrack","Bubble","speed","number","inMin","inMax","outMin","outMax","style","top","animationDuration","scale","backgroundColor","boxShadow","ArrayOfBubbles","i","Math","random","push","Bubbles","newArrayOfBubblesWithColor","map","bubble","colorsArray","floor","length","React","setColorsArray","quantization","rgbValues","depth","color","reduce","prev","curr","r","g","b","round","componentToSortBy","rMin","Number","MAX_VALUE","gMin","bMin","rMax","MIN_VALUE","gMax","bMax","forEach","pixel","min","max","rRange","gRange","bRange","biggestRange","findBiggestColorRange","sort","p1","p2","mid","slice","image","Image","crossOrigin","onload","canvas","width","height","ctx","getContext","drawImage","rgbArray","imageData","rgb","buildRgb","getImageData","data","quantColors","calculateLuminance","p","orderByLuminance","componentToHex","c","hex","toString","toUpperCase","rgbToHex","App","setToken","fetch","response","json","access_token","getToken","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2b34b18.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Login() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <a className=\"btn-spotify\" href=\"https://myspotifyserver.onrender.com/auth/login\" >\n                    Login with Spotify \n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default Login;\n\n","import React, { useState, useEffect } from 'react';\nimport { FaPlayCircle, FaPauseCircle, FaStepBackward, FaStepForward } from \"react-icons/fa\";\n\nconst track = {\n    name: \"\",\n    album: {\n        images: [\n            { url: \"\" }\n        ]\n    },\n    artists: [\n        { name: \"\" }\n    ]\n}\n\nlet currentSong = \"\"\n\nfunction WebPlayback(props) {\n\n    const [is_paused_active_currentTrack, setAllThatStuff] = useState([false, false, track]);\n    // const [is_active, setActive] = useState(false);\n    const [player, setPlayer] = useState(undefined);\n    // const [current_track, setTrack] = useState(track);\n\n\n    \n\n\n\n    useEffect(() => {\n\n        const script = document.createElement(\"script\");\n        script.src = \"https://sdk.scdn.co/spotify-player.js\";\n        script.async = true;\n\n        document.body.appendChild(script);\n\n        window.onSpotifyWebPlaybackSDKReady = () => {\n\n            const player = new window.Spotify.Player({\n                name: 'Spotify Visualizer',\n                getOAuthToken: cb => { cb(props.token); },\n                volume: 1\n            });\n\n            setPlayer(player);\n\n            player.addListener('ready', ({ device_id }) => {\n                console.log('Ready with Device ID', device_id);\n            });\n\n            player.addListener('not_ready', ({ device_id }) => {\n                console.log('Device ID has gone offline', device_id);\n            });\n\n            player.addListener('player_state_changed', ( state => {\n\n                if (!state) {\n                    return;\n                }\n\n                // setTrack(state.track_window.current_track);\n                \n                 \n                // setPaused(state.paused);\n\n                 player.getCurrentState().then( state => { \n                     if(!state) {\n                        setAllThatStuff([state.paused, false, state.track_window.current_track]) \n                     }\n                     else {\n                        setAllThatStuff([state.paused,true, state.track_window.current_track])\n                        }\n                    }\n                );\n\n            }));\n\n            player.connect();\n\n        };\n    }, []);\n\n    if (!is_paused_active_currentTrack[1]) { \n        return (\n            <>\n                <div className=\"container\">\n                    <div className=\"main-wrapper\">\n                        <b>Transfer playback in your Spotify app to \"Spotify Vizualizer\".</b>\n                    </div>\n                </div>\n            </>)\n    } else {\n\n         if(currentSong != is_paused_active_currentTrack[2].name) {\n             props.songChange(is_paused_active_currentTrack[2].album.images[2].url);\n             currentSong = is_paused_active_currentTrack[2].name;\n         }\n\n       \n        return (\n            <>\n                <div className=\"container\">\n\n\n                <img src={is_paused_active_currentTrack[2].album.images[2].url} className=\"now-playing__cover\" alt=\"\" />\n\n                    <div className=\"player\">\n\n                        <div className=\"player-buttons\">\n\n                            <div className=\"btn-spotify\" onClick={() => { player.previousTrack() }} >\n                                <FaStepBackward />\n                            </div>\n\n                            <div className=\"btn-spotify\" onClick={() => { player.togglePlay() }} >\n                                { is_paused_active_currentTrack[0] ? <FaPlayCircle /> : <FaPauseCircle /> }\n                            </div>\n\n                            <div className=\"btn-spotify\" onClick={() => { player.nextTrack() }} >\n                                <FaStepForward />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default WebPlayback\n","import React from \"react\";\r\n\r\n\r\nfunction Bubble(props) {\r\n    \r\n    return (\r\n        <span className=\"bubble\" style={{\r\n            top: `${props.top}vh`,\r\n            animationDuration: `${props.animationDuration}s`,\r\n            scale: `${props.scale}`,\r\n            backgroundColor: `${props.backgroundColor}`,\r\n            boxShadow: `0 0 0 calc(var(--w)/4) ${props.backgroundColor}51,\r\n            0 0 calc(var(--w)* 2) ${props.backgroundColor},\r\n            0 0 calc(var(--w)* 4) ${props.backgroundColor}`\r\n\r\n          }}></span>\r\n    )\r\n}\r\n\r\nexport default Bubble","import React from \"react\";\r\nimport Bubble from './Bubble'\r\n\r\nlet ArrayOfBubbles = []\r\n\r\nfunction scale(number, inMin, inMax, outMin, outMax) {\r\n    return ((number - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\r\n  }\r\n\r\nlet speed;\r\n\r\nfor (let i = 0; i < 200; i++) {\r\n  speed = Math.random() * (50 - 10) + 10;\r\n  ArrayOfBubbles.push(<Bubble key={i} top = {Math.random() * (110 + 10) - 10} animationDuration={500 / speed} scale={scale(speed, 10, 50, 0.5, 3) } backgroundColor={\"green\"} />);  }\r\n\r\nexport default ArrayOfBubbles;","import React from \"react\";\r\nimport ArrayOfBubbles from \"./ArrayOfBubbles\";\r\n\r\nfunction Bubbles(props) {\r\n\r\n\r\n  let newArrayOfBubblesWithColor = ArrayOfBubbles.map((bubble) => {\r\n    return {\r\n      ...bubble,\r\n      props: {\r\n        ...bubble.props,\r\n        backgroundColor: props.colorsArray[Math.floor(Math.random()*props.colorsArray.length)]\r\n      }\r\n    }\r\n  })\r\n\r\n\r\n  return <div className=\"bubblesContainer\">{newArrayOfBubblesWithColor}</div>;\r\n}\r\n\r\nexport default Bubbles;\r\n","import React from \"react\";\r\nimport WebPlayback from './WebPlayback'\r\n// import ArrayOfBubbles from \"./ArrayOfBubbles\";\r\nimport Bubbles from './Bubbles'\r\n\r\nfunction Player(props) {\r\n\r\n    let [colorsArray, setColorsArray] = React.useState([\"red\"])\r\n      \r\n      const buildRgb = (imageData) => {\r\n        const rgbValues = [];\r\n        // note that we are loopin every 4!\r\n        // for every Red, Green, Blue and Alpha\r\n        for (let i = 0; i < imageData.length; i += 4) {\r\n          const rgb = {\r\n            r: imageData[i],\r\n            g: imageData[i + 1],\r\n            b: imageData[i + 2],\r\n          };\r\n      \r\n          rgbValues.push(rgb);\r\n        }\r\n      \r\n        return rgbValues;\r\n      };\r\n      \r\n      /**\r\n       * Calculate the color distance or difference between 2 colors\r\n       *\r\n       * further explanation of this topic\r\n       * can be found here -> https://en.wikipedia.org/wiki/Euclidean_distance\r\n       * note: this method is not accuarate for better results use Delta-E distance metric.\r\n       */\r\n      const calculateColorDifference = (color1, color2) => {\r\n        const rDifference = Math.pow(color2.r - color1.r, 2);\r\n        const gDifference = Math.pow(color2.g - color1.g, 2);\r\n        const bDifference = Math.pow(color2.b - color1.b, 2);\r\n      \r\n        return rDifference + gDifference + bDifference;\r\n      };\r\n      \r\n      // returns what color channel has the biggest difference\r\n      const findBiggestColorRange = (rgbValues) => {\r\n        /**\r\n         * Min is initialized to the maximum value posible\r\n         * from there we procced to find the minimum value for that color channel\r\n         *\r\n         * Max is initialized to the minimum value posible\r\n         * from there we procced to fin the maximum value for that color channel\r\n         */\r\n        let rMin = Number.MAX_VALUE;\r\n        let gMin = Number.MAX_VALUE;\r\n        let bMin = Number.MAX_VALUE;\r\n      \r\n        let rMax = Number.MIN_VALUE;\r\n        let gMax = Number.MIN_VALUE;\r\n        let bMax = Number.MIN_VALUE;\r\n      \r\n        rgbValues.forEach((pixel) => {\r\n          rMin = Math.min(rMin, pixel.r);\r\n          gMin = Math.min(gMin, pixel.g);\r\n          bMin = Math.min(bMin, pixel.b);\r\n      \r\n          rMax = Math.max(rMax, pixel.r);\r\n          gMax = Math.max(gMax, pixel.g);\r\n          bMax = Math.max(bMax, pixel.b);\r\n        });\r\n      \r\n        const rRange = rMax - rMin;\r\n        const gRange = gMax - gMin;\r\n        const bRange = bMax - bMin;\r\n      \r\n        // determine which color has the biggest difference\r\n        const biggestRange = Math.max(rRange, gRange, bRange);\r\n        if (biggestRange === rRange) {\r\n          return \"r\";\r\n        } else if (biggestRange === gRange) {\r\n          return \"g\";\r\n        } else {\r\n          return \"b\";\r\n        }\r\n      };\r\n      \r\n      /**\r\n       * Median cut implementation\r\n       * can be found here -> https://en.wikipedia.org/wiki/Median_cut\r\n       */\r\n      const quantization = (rgbValues, depth) => {\r\n        const MAX_DEPTH = 4;\r\n      \r\n        // Base case\r\n        if (depth === MAX_DEPTH || rgbValues.length === 0) {\r\n          const color = rgbValues.reduce(\r\n            (prev, curr) => {\r\n              prev.r += curr.r;\r\n              prev.g += curr.g;\r\n              prev.b += curr.b;\r\n      \r\n              return prev;\r\n            },\r\n            {\r\n              r: 0,\r\n              g: 0,\r\n              b: 0,\r\n            }\r\n          );\r\n      \r\n          color.r = Math.round(color.r / rgbValues.length);\r\n          color.g = Math.round(color.g / rgbValues.length);\r\n          color.b = Math.round(color.b / rgbValues.length);\r\n      \r\n          return [color];\r\n        }\r\n      \r\n        /**\r\n         *  Recursively do the following:\r\n         *  1. Find the pixel channel (red,green or blue) with biggest difference/range\r\n         *  2. Order by this channel\r\n         *  3. Divide in half the rgb colors list\r\n         *  4. Repeat process again, until desired depth or base case\r\n         */\r\n        const componentToSortBy = findBiggestColorRange(rgbValues);\r\n        rgbValues.sort((p1, p2) => {\r\n          return p1[componentToSortBy] - p2[componentToSortBy];\r\n        });\r\n      \r\n        const mid = rgbValues.length / 2;\r\n        return [\r\n          ...quantization(rgbValues.slice(0, mid), depth + 1),\r\n          ...quantization(rgbValues.slice(mid + 1), depth + 1),\r\n        ];\r\n      };\r\n      \r\n        // Whenever file & image is loaded procced to extract the information from the image\r\n\r\n         \r\n\r\n    function songChange(url) {\r\n        const image = new Image();\r\n        image.crossOrigin = \"Anonymous\";\r\n          image.onload = () => {\r\n            let canvas = document.createElement('canvas');\r\n            canvas.width = 500\r\n            canvas.height = 500\r\n            const ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(image, 0, 0);\r\n      \r\n            /**\r\n             * getImageData returns an array full of RGBA values\r\n             * each pixel consists of four values: the red value of the colour, the green, the blue and the alpha\r\n             * (transparency). For array value consistency reasons,\r\n             * the alpha is not from 0 to 1 like it is in the RGBA of CSS, but from 0 to 255.\r\n             */\r\n            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n      \r\n            // Convert the image data to RGB values so its much simpler\r\n            const rgbArray = buildRgb(imageData.data);\r\n      \r\n            /**\r\n             * Color quantization\r\n             * A process that reduces the number of colors used in an image\r\n             * while trying to visually maintin the original image as much as possible\r\n             */\r\n            const quantColors = quantization(rgbArray, 0);\r\n            const orderByLuminance = (rgbValues) => {\r\n                const calculateLuminance = (p) => {\r\n                  return 0.2126 * p.r + 0.7152 * p.g + 0.0722 * p.b;\r\n                };\r\n              \r\n                return rgbValues.sort((p1, p2) => {\r\n                  return calculateLuminance(p2) - calculateLuminance(p1);\r\n                });\r\n              };\r\n\r\n            const rgbToHex = (pixel) => {\r\n                const componentToHex = (c) => {\r\n                  const hex = c.toString(16);\r\n                  return hex.length == 1 ? \"0\" + hex : hex;\r\n                };\r\n              \r\n                return (\r\n                  \"#\" +\r\n                  componentToHex(pixel.r) +\r\n                  componentToHex(pixel.g) +\r\n                  componentToHex(pixel.b)\r\n                ).toUpperCase();\r\n              };\r\n            let sortedColors = orderByLuminance(quantColors)\r\n            const colorsArray = sortedColors.map((color) => rgbToHex(color))\r\n            setColorsArray(colorsArray)\r\n          };\r\n          image.src = url\r\n        \r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <WebPlayback token={props.token} songChange={songChange} />\r\n            <Bubbles colorsArray={colorsArray} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Player","import React, { useState, useEffect } from 'react';\nimport Login from './Login'\nimport './App.css';\nimport Player from './Player'\n\n\nfunction App() {\n\n  const [token, setToken] = useState('');\n\n  useEffect(() => {\n\n    async function getToken() {\n       const response = await fetch('/');\n       const json = await response.json();\n       setToken(json.access_token);\n    }\n\n    getToken();\n\n  }, []);\n\n  return (\n    <>\n        { (token === '') ? <Login/> :   <Player token={token} /> }\n    </>\n  );\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}